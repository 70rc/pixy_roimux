//
// Created by damian on 6/3/17.
//

#ifndef PIXY_ROIMUX_CHARGEDATA_H
#define PIXY_ROIMUX_CHARGEDATA_H

#include <iostream>
#include <string>
#include <utility>
#include <vector>
#include "TFile.h"
#include "TH2S.h"
#include "RunParams.h"


namespace pixy_roimux {
    /// \brief Class to convert the two DAQ histograms of each event to a pixel and an ROI histogram.
    ///
    /// The constructor can either read from a single pair of DAQ histograms passed by const pointers, read from a vector of
    /// pairs of const pointers to DAQ histograms, read an entire ROOT file of DAQ histograms, or read a specific subset of
    /// DAQ histograms from a ROOT file using a vector of event IDs. The resulting histograms are stored as pairs in a
    /// vector again. They can be accessed individually or using the vector both by reference and const reference. This
    /// allows to pass an instance of this class containing all the relevant data by reference and const reference,
    /// respectively. Furthermore, the histograms are cut after the number of samples specified in the RunParams
    /// in order to reduce the amount of unused data.
    class ChargeData {
    public:

        /// \brief Constructor reading all events from a ROOT file.
        ///
        /// Event IDs are generated by counting up from 0.
        /// \param t_rootFileName ROOT file to read from.
        /// \param t_subrunId stored alongside the data for later use.
        /// \param t_runParams run parameters.
        ChargeData(
                const std::string t_rootFileName,
                const unsigned t_subrunId,
                const pixy_roimux::RunParams &t_runParams);

        /// \brief Constructor reading a subset of events from a ROOT file.
        /// \param t_rootFileName ROOT file to read from.
        /// \param t_eventIds IDs of the events to read from file.
        /// \param t_subrunId stored alongside the data for later use.
        /// \param t_runParams run parameters.
        ChargeData(
                const std::string t_rootFileName,
                const std::vector<unsigned> &t_eventIds,
                const unsigned t_subrunId,
                const pixy_roimux::RunParams &t_runParams);

        /// \brief Constructor reading a vector of pairs of DAQ histograms.
        /// \param t_daqHistos DAQ histograms.
        /// \param t_eventIds event IDs corresponding to the DAQ histograms.
        /// \param t_subrunId stored alongside the data for later use.
        /// \param t_runParams run parameters.
        ChargeData(
                const std::vector<std::pair<const TH2S *, const TH2S *>> &t_daqHistos,
                const std::vector<unsigned> &t_eventIds,
                const unsigned t_subrunId,
                const pixy_roimux::RunParams &t_runParams);

        /// \brief Constructor directly reading a pair of DAQ histograms.
        /// \param t_indHisto Ind DAQ histogram.
        /// \param t_colHisto Col DAQ histogram.
        /// \param t_eventId event ID corresponding to the DAQ histograms.
        /// \param t_subrunId stored alongside the data for later use.
        /// \param t_runParams run parameters.
        ChargeData(
                const TH2S *const t_indHisto,
                const TH2S *const t_colHisto,
                const unsigned t_eventId,
                const unsigned t_subrunId,
                const pixy_roimux::RunParams &t_runParams);

        /// \brief Get the vector containing the readout histograms.
        /// \return readout histograms.
        std::vector<std::pair<TH2S, TH2S>> &getReadoutHistos() {
            return m_readoutHistos;
        }

        /// \brief Get the vector containing the readout histograms as const reference.
        /// \return readout histograms.
        const std::vector<std::pair<TH2S, TH2S>> &getReadoutHistos() const {
            return m_readoutHistos;
        }

        /// \brief Get the pixel histogram of a particular event.
        /// \param t_eventIdx index of the pixel histogram.
        /// \return pixel histogram.
        TH2S &getPixelHisto(const unsigned t_eventIdx) {
            return m_readoutHistos.at(t_eventIdx).first;
        }

        /// \brief Get the pixel histogram of a particular event as const reference.
        /// \param t_eventIdx index of the pixel histogram.
        /// \return pixel histogram.
        const TH2S &getPixelHisto(const unsigned t_eventIdx) const {
            return m_readoutHistos.at(t_eventIdx).first;
        }

        /// \brief Get the ROI histogram of a particular event.
        /// \param t_eventIdx index of the ROI histogram.
        /// \return ROI histogram.
        TH2S &getRoiHisto(const unsigned t_eventIdx) {
            return m_readoutHistos.at(t_eventIdx).second;
        }

        /// \brief Get the ROI histogram of a particular event as const reference.
        /// \param t_eventIdx index of the ROI histogram.
        /// \return ROI histogram.
        const TH2S &getRoiHisto(const unsigned t_eventIdx) const {
            return m_readoutHistos.at(t_eventIdx).second;
        }

        /// \brief Get vector of event IDs.
        /// \return event IDs.
        const std::vector<unsigned> &getEventIds() const {
            return m_eventIds;
        }

        /// \brief Get subrun ID.
        /// \return subrun ID.
        unsigned getSubrunId() const {
            return m_subrunId;
        }

        /// \brief Get the vector containing the noise parameters.
        /// \return noise parameters
        std::vector<std::pair<std::vector<std::pair<double, double>>, std::vector<std::pair<double, double>>>>
        &getNoiseParams() {
            return m_noiseParams;
        };

        /// \brief Get the vector containing the noise parameters as const reference.
        /// \return noise parameters
        const std::vector<std::pair<std::vector<std::pair<double, double>>, std::vector<std::pair<double, double>>>>
        &getNoiseParams() const {
            return m_noiseParams;
        };


    private:

        /// \brief Private method used internally to convert the histograms read by the constructor.
        void convertHistos();

        /// \brief Subrun ID.
        const unsigned m_subrunId;

        /// \brief Event IDs;
        std::vector<unsigned> m_eventIds;

        /// \brief Run parameters.
        const pixy_roimux::RunParams &m_runParams;

        /// \brief Vector of DAQ histogram const pointers.
        std::vector<std::pair<const TH2S *, const TH2S *>> m_daqHistos;

        /// \brief Vector of readout histograms.
        std::vector<std::pair<TH2S, TH2S>> m_readoutHistos;

        /// \brief Vector of vectors of mean and sigma from noise Gaussian for pixel and ROI channels
        std::vector<std::pair<std::vector<std::pair<double, double>>, std::vector<std::pair<double, double>>>> m_noiseParams;
    };
}


#endif //PIXY_ROIMUX_CHARGEDATA_H
