//
// Created by damian on 6/22/17.
//

#ifndef PIXY_ROIMUX_KALMANFIT_H
#define PIXY_ROIMUX_KALMANFIT_H


#include <algorithm>
#include <iostream>
#include <map>
#include <memory>
#include "TClonesArray.h"
#include "TFile.h"
#include "TGeoManager.h"
#include "TMatrixT.h"
#include "TRandom3.h"
#include "TTree.h"
#include "TVector3.h"
#include "AbsMeasurement.h"
#include "ConstField.h"
#include "Exception.h"
#include "EventDisplay.h"
#include "FieldManager.h"
#include "DAF.h"
#include "MaterialEffects.h"
#include "mySpacepointDetectorHit.h"
#include "mySpacepointMeasurement.h"
#include "MeasurementFactory.h"
#include "MeasurementProducer.h"
#include "RKTrackRep.h"
#include "TGeoMaterialInterface.h"
#include "Track.h"
#include "TrackCand.h"
#include "ChargeHits.h"
#include "RunParams.h"


namespace pixy_roimux {
    /// \brief Class implementing a Kalman fitter using the GenFit package.
    ///
    /// The fitter tries to fit a particle hypothesis defined via the PDG code in the RunParams to a subset of
    /// 3D hits generated by ChargeHits. The eigen vector with the highest eigen value found by the
    /// PrincipalComponentsCluster is used as an initial momentum guess with a magnitude defined in the RunParams.
    /// The spatial resolution as well as other parameters of the fitter can be set in the RunParams as well.
    /// By default, the deterministic annealing filter with reference track (from the PCA) is used. Other methods can
    /// be used by opening the interactive event display. All the relevant data is stored in a ROOT TTree. It can be
    /// opened later using the pixy_display standalone GenFit event display. The latter also allows to rerun the fitter.
    /// As GenFit incorporates ionisation losses and multiple scattering it needs a geometry including material
    /// properties. This can be generated using ROOT's EVE framework. An example geometry for the ArgonCube pixel
    /// prototype TPC can be generated using the makeGeom.C file in the source directory.
    class KalmanFit {
    public:
        /// \brief Constructor
        /// \param t_runParams run parameters.
        /// \param t_geoFileName geometry file created using ROOT's TGeoManager.
        /// \param t_initDisplay initialise the GenFit event display.
        KalmanFit(
                const RunParams &t_runParams,
                const std::string t_geoFileName,
                const bool t_initDisplay = false);

        /// \brief Run the fit.
        /// \param t_chargeHits ChargeHits object containing the data.
        /// \param t_treeFileName ROOT file where the TTree containing the results is saved to.
        void fit(
                const ChargeHits &t_chargeHits,
                const std::string t_treeFileName);

        /// \brief Open the GenFit event display to display the fitter results.
        ///
        /// The event display needs to be initialised at construction. Otherwise, this will fail.
        void openEventDisplay() {
            if (m_display) {
                m_display->open();
            }
            else {
                std::cerr << "WARNING: Cannot open event display because it was not initialised!" << std::endl;
            }
        }


    private:
        /// \brief Fit a single event.
        /// \param t_event Event struct.
        void fitEvent(const Event &t_event);

        /// \brief Run parameters.
        const RunParams &m_runParams;

        /// \brief GenFit event display pointer.
        genfit::EventDisplay *m_display = nullptr;

        /// \brief GenFit measurement factory.
        ///
        /// See GenFit documentation for more information.
        genfit::MeasurementFactory<genfit::AbsMeasurement> m_measurementFactory;

        /// \brief GenFit measurement producer.
        ///
        /// See GenFit documentation for more information.
        genfit::MeasurementProducer<genfit::mySpacepointDetectorHit, genfit::mySpacepointMeasurement> m_measurementProducer;

        /// \brief GenFit Kalman fitter.
        ///
        /// GenFit deterministic annealing filter (DAF). See GenFit documentation for more information.
        genfit::DAF m_kalmanFitter;

        /// \brief GenFit track pointer.
        ///
        /// The track object contains all the information needed by the fitter. This pointer is used to store the
        /// results to a ROOT TTree. From there, they can be loaded for further analysis as well as to rerun the fitter.
        genfit::Track *m_trackPtr = nullptr;

        /// \brief Detector ID needed by GenFit.
        ///
        /// See GenFit documentation for more information.
        const int m_detId = 1;

        /// \brief ROOT TTree used to store the fit resutls.
        std::unique_ptr<TTree> m_tree;

        /// \brief ROOT TClonesArray used to provide the 3D spacepoints needed by GenFit.
        ///
        /// See GenFit documentation for more information.
        TClonesArray m_hits;

        /// \brief ROOT pseudo random number generator.
        ///
        /// Intended to smear the initial guesses for the Kalman filter. Currently unused.
        TRandom3 m_gaussRng;

        /// \brief State covariance matrix.
        TMatrixDSym m_cov;

        /// \brief Spatial covariance matrix.
        TMatrixDSym m_posCov;

        /// \brief Event ID.
        ///
        /// Needed to store the event ID to the ROOT TTree.
        unsigned m_eventId;
    };
}


#endif //PIXY_ROIMUX_KALMANFIT_H
